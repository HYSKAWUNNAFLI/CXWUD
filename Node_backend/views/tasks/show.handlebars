{{!-- tasks/show.handlebars --}}
<div class="container mt-4">
  <div class="row mb-4">
    <div class="col">
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="/tasks">Tasks</a></li>
          <li class="breadcrumb-item active">{{task.title}}</li>
        </ol>
      </nav>
      <h2>
        <i class="fas fa-tasks me-2"></i>
        {{task.title}}
      </h2>
      <p class="text-muted">
        <span class="badge bg-{{getStatusColor task.status}} me-2">{{task.status}}</span>
        <span class="badge bg-{{getPriorityColor task.priority}}">{{task.priority}}</span>
      </p>
    </div>
    <div class="col text-end">
      <a href="/tasks" class="btn btn-outline-secondary">
        <i class="fas fa-arrow-left me-2"></i>Back to Tasks
      </a>
    </div>
  </div>

  <div class="row">
    <div class="col-md-8">
      <div class="card mb-4">
        <div class="card-header">
          <h5 class="card-title mb-0">
            <i class="fas fa-info-circle me-2"></i>Task Details
          </h5>
        </div>
        <div class="card-body">
          <div class="row mb-3">
            <div class="col-md-3 fw-bold">Description:</div>
            <div class="col-md-9">{{task.description}}</div>
          </div>
          
          <div class="row mb-3">
            <div class="col-md-3 fw-bold">Status:</div>
            <div class="col-md-9">
              <div class="btn-group">
                <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                  <span class="badge bg-{{getStatusColor task.status}}">{{task.status}}</span>
                </button>
                <ul class="dropdown-menu">
                  <li>
                    <a class="dropdown-item status-toggle" href="#" data-task-id="{{task.id}}" data-status="NOT_STARTED">
                      <span class="badge bg-secondary">NOT_STARTED</span>
                    </a>
                  </li>
                  <li>
                    <a class="dropdown-item status-toggle" href="#" data-task-id="{{task.id}}" data-status="IN_PROGRESS">
                      <span class="badge bg-primary">IN_PROGRESS</span>
                    </a>
                  </li>
                  <li>
                    <a class="dropdown-item status-toggle" href="#" data-task-id="{{task.id}}" data-status="COMPLETED">
                      <span class="badge bg-success">COMPLETED</span>
                    </a>
                  </li>
                </ul>
              </div>
            </div>
          </div>
          
          <div class="row mb-3">
            <div class="col-md-3 fw-bold">Priority:</div>
            <div class="col-md-9">
              <div class="btn-group">
                <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                  <span class="badge bg-{{getPriorityColor task.priority}}">{{task.priority}}</span>
                </button>
                <ul class="dropdown-menu">
                  <li>
                    <a class="dropdown-item priority-toggle" href="#" data-task-id="{{task.id}}" data-priority="LOW">
                      <span class="badge bg-info">LOW</span>
                    </a>
                  </li>
                  <li>
                    <a class="dropdown-item priority-toggle" href="#" data-task-id="{{task.id}}" data-priority="MEDIUM">
                      <span class="badge bg-warning">MEDIUM</span>
                    </a>
                  </li>
                  <li>
                    <a class="dropdown-item priority-toggle" href="#" data-task-id="{{task.id}}" data-priority="HIGH">
                      <span class="badge bg-danger">HIGH</span>
                    </a>
                  </li>
                </ul>
              </div>
            </div>
          </div>
          
          <div class="row mb-3">
            <div class="col-md-3 fw-bold">Assignee:</div>
            <div class="col-md-9">
              {{#if task.assignee_name}}
              {{task.assignee_name}} 
              {{else}}
              <span class="text-muted">Unassigned</span>
              {{/if}}
            </div>
          </div>
          
          <div class="row mb-3">
            <div class="col-md-3 fw-bold">Deadline:</div>
            <div class="col-md-9">
              {{#if task.deadline}}
              {{formatDate task.deadline}}
              {{else}}
              <span class="text-muted">No deadline set</span>
              {{/if}}
            </div>
          </div>
          
          <div class="row mb-3">
            <div class="col-md-3 fw-bold">Created By:</div>
            <div class="col-md-9">
              {{#if task.creator}}
              {{task.creator.name}} ({{task.creator.email}})
              {{else}}
              <span class="text-muted">Unknown</span>
              {{/if}}
            </div>
          </div>
          
          <div class="row mb-3">
            <div class="col-md-3 fw-bold">Created At:</div>
            <div class="col-md-9">
              {{formatDate task.created_at}}
            </div>
          </div>
          
          <div class="row mb-3">
            <div class="col-md-3 fw-bold">Last Updated:</div>
            <div class="col-md-9">
              {{formatDate task.updated_at}}
            </div>
          </div>
        </div>
        <div class="card-footer">
          <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteTaskModal">
            <i class="fas fa-trash me-2"></i>Delete Task
          </button>
        </div>
      </div>
    </div>
    
    <div class="col-md-4">
      {{#if task.meetingLog}}
      <div class="card mb-4">
        <div class="card-header">
          <h5 class="card-title mb-0">
            <i class="fas fa-calendar-alt me-2"></i>Related Meeting
          </h5>
        </div>
        <div class="card-body">
          <h5>{{task.meetingLog.title}}</h5>
          <p class="text-muted">
            <i class="far fa-calendar me-1"></i>
            {{formatDate task.meetingLog.meeting_date}}
          </p>
          <p>{{truncate task.meetingLog.content 150}}</p>
          <a href="/meetings/{{task.meetingLog.id}}" class="btn btn-sm btn-outline-primary">
            <i class="fas fa-eye me-1"></i>View Meeting
          </a>
        </div>
      </div>
      {{/if}}
      
      <div class="card">
        <div class="card-header">
          <h5 class="card-title mb-0">
            <i class="fas fa-edit me-2"></i>Edit Task
          </h5>
        </div>
        <div class="card-body">
          <form id="editTaskForm">
            <div class="mb-3">
              <label for="task_name" class="form-label">Task Title</label>
              <input type="text" class="form-control" id="task_name" name="task_name" value="{{task.title}}" required>
            </div>
            <div class="mb-3">
              <label for="description" class="form-label">Description</label>
              <textarea class="form-control" id="description" name="description" rows="3">{{task.description}}</textarea>
            </div>
            <div class="mb-3">
              <label for="assignee" class="form-label">Assignee</label>
              <select class="form-select" id="assignee" name="assignee">
                <option value="">Select an assignee</option>
                {{#each users}}
                <option value="{{this.name}}" {{#if (eq this.name ../task.assignee_name)}}selected{{/if}}>{{this.name}}</option>
                {{/each}}
              </select>
            </div>
            <div class="mb-3">
              <label for="deadline" class="form-label">Deadline</label>
              <input type="date" class="form-control" id="deadline" name="deadline" value="{{formatDateForInput task.deadline}}">
            </div>
            <div class="mb-3">
              <label for="priority" class="form-label">Priority</label>
              <select class="form-select" id="priority" name="priority" required>
                <option value="LOW" {{#if (eq task.priority "LOW")}}selected{{/if}}>Low</option>
                <option value="MEDIUM" {{#if (eq task.priority "MEDIUM")}}selected{{/if}}>Medium</option>
                <option value="HIGH" {{#if (eq task.priority "HIGH")}}selected{{/if}}>High</option>
              </select>
            </div>
            <button type="button" class="btn btn-primary" id="updateTaskBtn">
              <i class="fas fa-save me-2"></i>Update Task
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Delete Task Modal -->
<div class="modal fade" id="deleteTaskModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="fas fa-exclamation-triangle me-2 text-danger"></i>Delete Task
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this task? This action cannot be undone.</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="deleteTaskBtn">
          <i class="fas fa-trash me-2"></i>Delete Task
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Update task
    document.getElementById('updateTaskBtn').addEventListener('click', function() {
      const form = document.getElementById('editTaskForm');
      const formData = new FormData(form);
      const data = {};
      
      for (const [key, value] of formData.entries()) {
        data[key] = value;
      }
      
      fetch('/tasks/{{task.id}}', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showAlert('Task updated successfully', 'success');
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showAlert(data.error || 'Failed to update task', 'danger');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showAlert('An error occurred while updating the task', 'danger');
      });
    });
    
    // Delete task
    document.getElementById('deleteTaskBtn').addEventListener('click', function() {
      fetch('/tasks/{{task.id}}', {
        method: 'DELETE'
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showAlert('Task deleted successfully', 'success');
          setTimeout(() => {
            window.location.href = '/tasks';
          }, 1500);
        } else {
          showAlert(data.error || 'Failed to delete task', 'danger');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showAlert('An error occurred while deleting the task', 'danger');
      });
    });
    
    // Status toggle
    document.querySelectorAll('.status-toggle').forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const taskId = this.getAttribute('data-task-id');
        const status = this.getAttribute('data-status');
        
        fetch(`/tasks/${taskId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ status })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showAlert('Task status updated successfully', 'success');
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            showAlert(data.error || 'Failed to update task status', 'danger');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showAlert('An error occurred while updating the task status', 'danger');
        });
      });
    });
    
    // Priority toggle
    document.querySelectorAll('.priority-toggle').forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const taskId = this.getAttribute('data-task-id');
        const priority = this.getAttribute('data-priority');
        
        fetch(`/tasks/${taskId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ priority })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showAlert('Task priority updated successfully', 'success');
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            showAlert(data.error || 'Failed to update task priority', 'danger');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showAlert('An error occurred while updating the task priority', 'danger');
        });
      });
    });
  });
</script> 